# -*- coding: UTF-8 -*-
import pandas as pd
from utils_global.global_config import *
from small_quant_lab.factor_industry_exposure_function import *

period_type = "W"
# 从pickle文件中读取整理好的所有股票数据
df = pd.read_pickle(
    r'{}\data\historical\processed_data\all_stock_data_{}.pkl'.format(project_path, period_type))
df.dropna(subset=['下周期涨跌幅'], inplace=True)
# ===删除下个交易日不交易、开盘涨停的股票，因为这些股票在下个交易日开盘时不能买入。
df = df[df['下日_是否交易'] == 1]
df = df[df['下日_开盘涨停'] == False]
df = df[df['下日_是否ST'] == False]
df = df[df['下日_是否退市'] == False]

# print(df.columns)
factor_li = ['流通市值（万元）', '总市值 （万元）', '总股本 （万股）', '流通股本 （万股）', '自由流通股本 （万）', '成交量', '量比', '市盈率', '市盈率TTM', '市净率', '市销率', '市销率TTM', '股息率（%）', '股息率TTM（%）', 'VWAP', '换手率', '当日换手率', '5日均线', '20日均线', 'bias_5', '5日涨跌幅环比变化', 'bias_20', '20日涨跌幅环比变化', '量价相关性', '20日涨跌幅', 'alpha95', '均线_5', '涨跌幅_5', '涨跌幅std_5', '收盘价std_5', '成交额std_5', '成交额_5', '振幅_5', '量价相关性_5', '换手率mean_5', 'ROC_5', 'WR_5', '均线_10', 'bias_10', '涨跌幅_10', '涨跌幅std_10', '收盘价std_10', '成交额std_10', '成交额_10', '振幅_10', '量价相关性_10', '换手率mean_10', 'ROC_10', 'WR_10', '均线_20', '涨跌幅_20', '涨跌幅std_20', '收盘价std_20', '成交额std_20', '成交额_20', '振幅_20', '量价相关性_20', '换手率mean_20', 'ROC_20', 'WR_20', '短期借款', '长期借款', '应付债券', '一年内到期的非流动负债', '营业收入', '营业总收入', '负债应付利息', '应付手续费及佣金', '销售费用', '管理费用', '研发费用', '资产减值损失', '固定资产折旧、油气资产折耗、生产性物资折旧', '无形资产摊销', '长期待摊费用摊销', '其他综合利益', '税金及附加', '营业成本', '归母净利润', '归母所有者权益合计', '货币资金', '流动负债合计', '非流动负债合计', '经营活动产生的现金流量净额', '净利润', '营业总成本', '应收票据及应收账款', '现金及现金等价物净增加额', '投资活动产生的现金流量净额', '归母净利润_ttm', '归母净利润_ttm同比', '归母净利润_单季', '归母净利润_单季同比', '营业收入_ttm', '营业收入_单季同比', '营业收入_单季环比', '研发费用_ttm', '净利润_单季', '净利润_ttm', '净利润_ttm同比', '营业总收入_ttm', '营业总成本_ttm', '营业总收入_单季', '营业总收入_单季同比', '营业总收入_单季环比', '经营活动产生的现金流量净额_ttm', '期末总股本', '流动资产合计', '非流动资产合计', '股东权益合计(不含少数股东权益)', '股东权益合计(含少数股东权益)', '营业支出', '营业利润', '利润总额', '净利润(含少数股东损益)', '净利润(不含少数股东损益)', '少数股东损益', '综合收益总额', '归属于母公司(或股东)的综合收益总额', '归属于少数股东的综合收益总额', '其他收益', '公司类型', '报表类型', '报告期类型', '企业自由现金流量', '筹资活动产生的现金流量净额', '经营活动产生的现金流量净额(间接法)', '每股营业总收入', '每股营业收入', '扣除非经常性损益后的净利润（扣非净利润）', '毛利', '流动比率', '速动比率', '保守速动比率', '应收账款周转率', '流动资产周转率', '固定资产周转率', '总资产周转率', '经营活动净收益', '净债务', '有形资产', '营运资金', '营运流动资本', '全部投入资本', '留存收益', '期末摊薄每股收益', '每股净资产', '每股经营活动产生的现金流量净额', '每股留存收益', '每股现金流量净额', '每股息税前利润', '每股企业自由现金流量', '每股股东自由现金流量', '净利润/营业总收入', '销售费用/营业总收入', '管理费用/营业总收入', '财务费用/营业总收入', '资产减值损失/营业总收入', '营业总成本/营业总收入', '营业利润/营业总收入', '息税前利润/营业总收入', '净资产收益率', '加权平均净资产收益率', '净资产收益率(扣除非经常损益)', '总资产报酬率', '总资产净利润', '投入资本回报率', '年化净资产收益率', '年化总资产报酬率', '资产负债率', '权益乘数', '权益乘数(杜邦分析)', '流动资产/总资产', '非流动资产/总资产', '有形资产/总资产', '带息债务/全部投入资本', '归属于母公司的股东权益/全部投入资本', '流动负债/负债合计', '非流动负债/负债合计', '经营活动产生的现金流量净额/流动负债', '产权比率', '归属于母公司的股东权益/负债合计', '归属于母公司的股东权益/带息债务', '有形资产/负债合计', '有形资产/带息债务', '有形资产/净债务', '经营活动产生的现金流量净额/负债合计', '营业周期', '年化总资产净利率', '总资产净利率(杜邦分析)', '固定资产合计', '利润总额／营业收入', '销售费用／营业总收入 (单季度)', '营业总成本／营业总收入 (单季度)', '净资产收益率(单季度)', '净资产单季度收益率(扣除非经常损益)', '总资产净利润(单季度)', '经营活动产生的现金流量净额／营业收入(单季度)', '基本每股收益同比增长率(%)', '稀释每股收益同比增长率(%)', '每股经营活动产生的现金流量净额同比增长率(%)', '营业利润同比增长率(%)', '利润总额同比增长率(%)', '归属母公司股东的净利润同比增长率(%)', '归属母公司股东的净利润-扣除非经常损益同比增长率(%)', '经营活动产生的现金流量净额同比增长率(%)', '净资产收益率(摊薄)同比增长率(%)', '每股净资产相对年初增长率(%)', '资产总计相对年初增长率(%)', '归属母公司的股东权益相对年初增长率(%)', '营业总收入同比增长率(%)', '营业收入同比增长率(%)', '营业收入同比增长率(%)(单季度)', '营业利润环比增长率(%)(单季度)', '净资产同比增长率', '归母PE(ttm)', '归母ROE(ttm)', '毛利率(ttm)', 'SP', 'EV2', 'EBITDA', '企业倍数', '现金流负债比', '归母净利润同比增速_60', 'ROE_单季', '单日振幅20日均值', '20日振幅', '周期内成交额', '周期内最后交易日流通市值', '周期换手率']

# RankIC，算出的结果很奇怪
# industry_col = "申万一级行业"
# corr_dct_li = []
# for factor in factor_li:
#     try:
#         corr_dct = rank_IC_calculator(df, factor, industry_col)
#         corr_dct_li.append(corr_dct)
#     except:
#         print("行业：{}rankIC计算失败")
#
# df_rank_ic = pd.DataFrame(corr_dct_li)
#
# df_rank_ic.index = factor_li
#
# df_rank_ic.to_csv(r"rankIC值列表.csv", encoding='gbk')  # 不涉及生产运行，地址格式不正确

# normalIC
# industry_col = "申万一级行业"
# corr_dct_li = []
# for factor in factor_li:
#     try:
#         corr_dct = normal_IC_calculator(df, factor, industry_col)
#         corr_dct_li.append(corr_dct)
#     except:
#         print("行业：{}normalIC计算失败")
#
# df_normal_ic = pd.DataFrame(corr_dct_li)
#
# df_normal_ic.index = factor_li
#
# df_normal_ic.to_csv(r"normalIC值列表.csv", encoding='gbk')  # 不涉及生产运行，地址格式不正确

# 小市值normalIC
industry_col = "下日_是否交易"  # 不区分行业
df = df[df['总市值 （万元）'] < 300000]
if not Second_Board_available:
    df = df[df['市场类型'] != '创业板']
if not STAR_Market_available:
    df = df[df['市场类型'] != '科创板']
start_date = "20180101"
end_date = '20230701'

corr_dct_li = []
for factor in factor_li:
    try:
        corr_dct = normal_IC_calculator(df, factor, industry_col, start_date=start_date, end_date=end_date)
        corr_dct_li.append(corr_dct)
    except:
        print("因子：{} normalIC计算失败！")

df_normal_ic = pd.DataFrame(corr_dct_li)

df_normal_ic.index = factor_li

df_normal_ic.to_csv(r"小市值normalIC值列表_start-{}_end-{}.csv".format(start_date, end_date), encoding='gbk')  # 不涉及生产运行，地址格式不正确
